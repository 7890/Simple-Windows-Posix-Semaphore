{"name":"Simple-windows-posix-semaphore","tagline":"A simple Window POSIX semaphore library","body":"##Simple POSIX Semaphore for Windows\r\nPOSIX semaphores allow processes and threads to synchronize their actions. A semaphore is an integer whose value is never allowed to fall below zero.  Two operations can be performed on semaphores: increment the semaphore value by one (**sem_post**); and decrement the semaphore value by one (**sem_wait**). If the value of a semaphore is currently zero, then a **sem_wait** operation will block until the value becomes greater than zero.\r\n\r\nThe *semaphore.c* & *semaphore.h* files provide replacement for POSIX semaphores on Windows XP or later. The provided **sem_** functions do not behave identically to their unix equivalents, but they will work as drop-in replacements for most use cases.\r\n\r\n### Functions Provided\r\nint sem_init(sem_t *sem, int pshared, unsigned int value);\r\n\r\nint sem_wait(sem_t *sem);\r\n\r\nint sem_trywait(sem_t *sem);\r\n\r\nint sem_timedwait(sem_t *sem, const struct timespec *abs_timeout);\r\n\r\nint sem_post(sem_t *sem);\r\n\r\nint sem_getvalue(sem_t *sem, int *value);\r\n\r\nint sem_destroy(sem_t *sem);\r\n\r\nsem_t *sem_open(const char *name, int oflag, mode_t mode, unsigned int value);\r\n\r\nint sem_close(sem_t *sem);\r\n\r\nint sem_unlink(const char *name);\r\n\r\n###Example Use\r\n\r\n\t#include \"semaphore.h\"\r\n\r\n\tint main(int argc, char **argv) {\r\n\tsem_t *sem = sem_open(\"example_semaphore\", O_CREAT | O_EXCL, 0, 1);\r\n\t\r\n\t/*check if semaphore failed*/\r\n\tif (sem == SEM_FAILED) {\r\n\t\tprintf(\"Failed to acquired semaphore\\n\");\r\n\t\treturn -1;\r\n\t\t}\r\n\r\n\tprintf(\"About to enter critical code block 1\\n\");\r\n\tsem_wait(sem);\r\n\t\r\n\t/*Critical Code Block 1*/\r\n\tprintf(\"In critical code block 1\\n\");\r\n\tSleep(2000);\r\n\tprintf(\"Finished critical code block 1\\n\\n\");\r\n\tsem_post(sem);\r\n\t\r\n\t/*Normal Block 1*/\r\n\tprintf(\"Normal code block 1\\n\");\r\n\tprintf(\"About to enter critical code block 1\\n\");\r\n\tsem_wait(sem);\r\n\t\r\n\t/*Critical Code Block 2*/\r\n\tprintf(\"In critical code block 2\\n\");\r\n\tSleep(2000);\r\n\tprintf(\"Finished critical code 2\\n\\n\");\r\n\tsem_post(sem);\r\n\t\r\n\t/*Normal Block 2*/\r\n\tprintf(\"Normal code block 2\\n\\n\");\r\n\t\r\n\t/*clean up*/\r\n\tsem_unlink(\"example_semaphore\");\r\n\tprintf(\"exiting\\n\");\r\n\tsem_close(sem);\r\n\treturn 0;\r\n\t}\r\n### Requirement\r\n\r\nThere are no external requirements. Just add the two files (*semaphore.c* & *semaphore.h*) to your project and include the *semaphore.h* header.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}